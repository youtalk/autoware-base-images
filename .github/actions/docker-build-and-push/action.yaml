name: docker-build-and-push
description: ""

inputs:
  platform:
    description: ""
    required: true
  bake-target:
    description: ""
    required: true
  build-args:
    description: ""
    required: false
  tag-prefix:
    description: ""
    required: false

runs:
  using: composite
  steps:
    - name: Install vcstool
      run: |
        sudo apt-get -y update
        sudo apt-get -y install python3-pip
        pip install --no-cache-dir vcstool
      shell: bash

    - name: Run vcs import
      run: |
        wget -O autoware.repos https://raw.githubusercontent.com/autowarefoundation/autoware/main/autoware.repos
        mkdir src
        vcs import src < autoware.repos
      shell: bash

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Restore apt-get
      uses: actions/cache/restore@v4
      with:
        path: |
          var-cache-apt
        key: apt-get-${{ inputs.platform }}-${{ inputs.name }}-${{ hashFiles('src/**/package.xml') }}
        restore-keys: |
          apt-get-${{ inputs.platform }}-${{ inputs.name }}-
          apt-get-${{ inputs.platform }}-

    - name: Inject cache into docker
      uses: reproducible-containers/buildkit-cache-dance@v3.1.2
      with:
        cache-map: |
          {
            "var-cache-apt": "/var/cache/apt"
          }
        skip-extraction: true

    - name: Set Docker tags
      id: set-docker-tags
      run: |
        tags=()
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_type }}" == "tag" ]; then
            tags+=("${{ inputs.tag-prefix }}-"$(echo "${{ github.ref }}" | sed -E 's/.*([vV][0-9]+\.[0-9]+\.[0-9]+).*/\1/')")
        fi

        tags+=("${{ inputs.tag-prefix }}-{{date 'YYYYMMDD'}}")

        # Output multiline strings: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "tags<<$EOF" >> $GITHUB_OUTPUT
        echo "$(printf "%s\n" "${tags[@]}")" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
      shell: bash

    - name: Docker meta for autoware-core-depend
      id: meta-autoware-core-depend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ inputs.bake-target }}
        tags: ${{ steps.set-docker-tags.outputs.tags }}
        bake-target: docker-metadata-action-autoware-core-depend

    - name: Docker meta for autoware-universe-depend
      id: meta-autoware-universe-depend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ inputs.bake-target }}
        tags: ${{ steps.set-docker-tags.outputs.tags }}
        bake-target: docker-metadata-action-autoware-universe-depend

    - name: Docker meta for exec-depend
      id: meta-exec-depend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ inputs.bake-target }}
        tags: ${{ steps.set-docker-tags.outputs.tags }}
        bake-target: docker-metadata-action-exec-depend

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}

    - name: Build and Push to GitHub Container Registry
      uses: docker/bake-action@v5
      with:
        push: true
        files: |
          docker-bake.hcl
          ${{ steps.meta-autoware-core-depend.outputs.bake-file }}
          ${{ steps.meta-autoware-universe-depend.outputs.bake-file }}
          ${{ steps.meta-exec-depend.outputs.bake-file }}
        provenance: false
        set: |
          ${{ inputs.build-args }}
